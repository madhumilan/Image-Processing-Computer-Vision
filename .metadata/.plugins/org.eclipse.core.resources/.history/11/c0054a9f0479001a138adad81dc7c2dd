'''
Created on 06-Apr-2020

@author: HP
'''

import cv2
import numpy as np
import pickle

face_cascade = cv2.CascadeClassifier('cascades/data/haarcascade_frontalface_alt2.xml')
eye_cascade = cv2.CascadeClassifier('cascades/data/haarcascade_eye.xml')

recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.read("trainner.yml")

labels = {}
with open("labels.pickle", 'rb') as f:
    org_labels = pickle.load(f)
    labels = {v:k for k,v in org_labels.items()}

vid = cv2.VideoCapture(0)

while(True):
    # Capture every frame
    ret, frame = vid.read()
    
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor = 1.5, minNeighbors = 5)
    
    for x,y,w,h in faces:
        #print(x,y,w,h)
        #Region of interest
        roi_gray = gray[y:y+h, x:x+w]
        roi_rgb = frame[y:y+h, x:x+w]
        id_, confidence = recognizer.predict(roi_gray)
        if confidence >= 45 and confidence <= 85:
            print(id_)
            print(labels[id_])
            font = cv2.FONT_HERSHEY_SIMPLEX
            name = labels[id_]
            color = (255, 255, 255)
            stroke = 2
            cv2.putText(frame, name, (x,y), font, 1, color, stroke, cv2.LINE_AA)
#         face_image = "my_face_gray.png"
#         cv2.imwrite(face_image, roi_gray)
#         cv2.imwrite('my_face_rgb.png', roi_rgb)
        
        
        # Draw a rectangle
        color = (255, 0, 0) # BGR
        stroke = 3
        width = x + w
        height = y + h
        cv2.rectangle(frame, (x, y), (width, height), color, stroke)
        
        # Eye Recognizer
        eyes = eye_cascade.detectMultiScale(roi_gray)
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(frame, (ex,ey), (ex+ew,ey+eh), (0, 255, 255), 2)
    
    # Display each frame
    cv2.imshow('Frame', frame)
    if cv2.waitKey(20) & 0xFF == ord('q'):
        break
    
vid.release()
cv2.destroyAllWindows()
    
